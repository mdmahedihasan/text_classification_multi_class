# -*- coding: utf-8 -*-
"""text_classification_multi_class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpW4Yd-1-eFTBhV_cNtvBhwiwC_UTG41
"""

import os
import re
import string

import matplotlib.pyplot as plt
from tensorflow.keras import layers, losses

import tensorflow as tf

URL = "https://storage.googleapis.com/download.tensorflow.org/data/stack_overflow_16k.tar.gz"

dataset = tf.keras.utils.get_file(
    "stack_overflow_16k",
    URL,
    untar=True,
    cache_dir='.',
    cache_subdir='stack_overflow')
dataset_dir = os.path.dirname(dataset)

os.listdir(dataset_dir)
train_dir = os.path.join(dataset_dir, "train")
os.listdir(train_dir)

sample_file = os.path.join(train_dir, "python/1001.txt")
with open(sample_file, encoding="UTF-8") as file:
    print(file.read())

BATCH_SIZE = 32
SEED = 42

raw_train_ds = tf.keras.utils.text_dataset_from_directory(
    "stack_overflow/train",
    batch_size=BATCH_SIZE,
    validation_split=0.2,
    subset="training",
    seed=SEED)

for text_batch, label_batch in raw_train_ds.take(1):
    for i in range(3):
        print(text_batch.numpy()[i])
        print(label_batch.numpy()[i])

print("Label 0 corresponds to : ", raw_train_ds.class_names[0])
print("Label 1 corresponds to : ", raw_train_ds.class_names[1])
print("Label 2 corresponds to : ", raw_train_ds.class_names[2])
print("Label 3 corresponds to : ", raw_train_ds.class_names[3])

raw_val_ds = tf.keras.utils.text_dataset_from_directory(
    "stack_overflow/train",
    batch_size=BATCH_SIZE,
    validation_split=0.2,
    subset="validation",
    seed=SEED)
raw_test_ds = tf.keras.utils.text_dataset_from_directory(
    "stack_overflow/test",
    batch_size=BATCH_SIZE)


def custom_standardization(input_data):
    """Reform text.

    Args:
        input_data (<class 'tensorflow.python.framework.ops.EagerTensor'>): user's question.

    Returns:
        (<class 'tensorflow.python.framework.ops.EagerTensor'>): standard text.
    """
    lowercase = tf.strings.lower(input_data)
    stripped_html = tf.strings.regex_replace(lowercase, "<br />", " ")
    return tf.strings.regex_replace(stripped_html, f"{[re.escape(string.punctuation)]}", "")


MAX_FEATURES = 10000
SEQUENCE_LENGTH = 250

vectorize_layer = layers.TextVectorization(
    standardize=custom_standardization,
    max_tokens=MAX_FEATURES,
    output_mode="int",
    output_sequence_length=SEQUENCE_LENGTH)

train_text = raw_train_ds.map(lambda x, y: x)
vectorize_layer.adapt(train_text)


def vectorize_text(text, label):
    """Text to vectorized text.

    Args:
        text (<class 'tensorflow.python.framework.ops.EagerTensor'>): user's question.
        label (<class 'tensorflow.python.framework.ops.EagerTensor'>):
        tf.Tensor(1, shape=(), dtype=int32)

    Returns:
        <class 'tensorflow.python.framework.ops.SymbolicTensor'>:
        Tensor("text_vectorization_8_1/Pad:0", shape=(None, None), dtype=int64)
    """
    text = tf.expand_dims(text, axis=-1)
    return vectorize_layer(text), label


text_batch, label_batch = next(iter(raw_train_ds))
first_review, first_label = text_batch[0], label_batch[0]
print("Review : ", first_review)
print("Label : ", raw_train_ds.class_names[first_label])
print("Vectorized review : ", vectorize_text(first_review, first_label))

vectorize_layer.get_vocabulary()
len(vectorize_layer.get_vocabulary())

train_ds = raw_train_ds.map(vectorize_text)
val_ds = raw_val_ds.map(vectorize_text)
test_ds = raw_test_ds.map(vectorize_text)

AUTOTUNE = tf.data.AUTOTUNE

test_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)
test_ds = test_ds.cache().prefetch(buffer_size=AUTOTUNE)

EMBEDDING_DIM = 16

model = tf.keras.Sequential([
    layers.Embedding(MAX_FEATURES, EMBEDDING_DIM),
    layers.Dropout(0.2),
    layers.GlobalAveragePooling1D(),
    layers.Dropout(0.2),
    layers.Dense(4, activation="softmax")
])
model.summary()

model.compile(
    loss=losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer="adam",
    metrics=["accuracy"])

EPOCHS = 10
history = model.fit(train_ds, validation_data=val_ds, epochs=EPOCHS)

loss, accuracy = model.evaluate(test_ds)
print("Loss : ", loss)
print("Accuracy : ", accuracy)

history_dict = history.history
history_dict.keys()

acc = history_dict['accuracy']
val_acc = history_dict['val_accuracy']
loss = history_dict['loss']
val_loss = history_dict['val_loss']

EPOCHS = range(1, len(acc) + 1)

plt.plot(EPOCHS, loss, label="Training loss")
plt.plot(EPOCHS, val_loss, label="Validation loss")
plt.title("Training and validation loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.show()

plt.plot(EPOCHS, acc, label="Training accuracy")
plt.plot(EPOCHS, val_acc, label="Validation accuracy")
plt.title("Training and validation accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

export_model = tf.keras.Sequential([
    vectorize_layer, model,
    layers.Activation("softmax")])
export_model.compile(
    loss=losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer="adam",
    metrics=["accuracy"])

metrics = export_model.evaluate(raw_test_ds, return_dict=True)
print(metrics)

examples = tf.constant(["blank program that allows user to restart or exit it\
                        i want this program to allow users to restart the game\
                        when they are through or exit it if they do not want to\
                        play the game again, but i cant figure out how to do it.\
                        can you please help me with the code that makes the program\
                        do that?.please correct me if i mistype the code below..below\
                        is the code of the game i have written using blank:..import\
                        random..secret_number = random.randrange(1, 101)..guess = 0.tries = 0..while\
                        guess != secret_number:.    guess = int(input(""guess a number: "")).\
                        tries = tries + 1..    if guess &lt; secret_number:.\
                        print(""too low!"")..    elif guess &gt; secret_number:.\
                        print(""too high!"")..    else:.        print(""you got it!"").\
                        print(""number of tries: "", tries)..\
                        userinput = input(""enter 'r' to restart or 'x' to exit"").capitalize()..\
                        if userinput == ""r"":.        #code to restart the game goes here..\
                        elif gamereply == ""x"":.        #code to exit the game goes here"])
export_model.predict(examples)
